/*
 * Copyright (c) 2012 Clark & Parsia, LLC. <http://www.clarkparsia.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.clarkparsia.sbol;

import java.io.IOException;
import java.io.OutputStream;
import org.openrdf.model.Resource;
import org.openrdf.model.URI;
import org.openrdf.model.Value;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.model.vocabulary.XMLSchema;
import org.openrdf.rio.*;
import org.openrdf.rio.rdfxml.util.RDFXMLPrettyWriterFactory;
import org.sbols.converter.sbol.PartsRegistrySBOLVocabulary;
import org.sbolstandard.core.SBOLDocument;
import org.sbolstandard.core.SBOLVisitor;

/**
 * A concrete SBOL writer implementation that serializes the SBOL objects in an
 * RDF format. RDf/XML serializations generated by this class are compatible
 * with the standard SBOL XML syntax.
 *
 * @author Evren Sirin
 */
public class SBOLRDFWriter extends SBOLAbstractWriter {

    /**
     * It is crucial to use the pretty RDF/XML writer otherwise the output won't
     * be SBOL-compliant.
     */
    private static RDFXMLPrettyWriterFactory RDFXML_WRITER_FACTORY = new RDFXMLPrettyWriterFactory();
    private final RDFWriterFactory factory;

    public SBOLRDFWriter(boolean validate) {
        this(RDFFormat.RDFXML, validate);
    }

    public SBOLRDFWriter(RDFFormat format, boolean validate) {
        super(validate);
        this.factory = format.equals(RDFFormat.RDFXML) ? RDFXML_WRITER_FACTORY : RDFWriterRegistry.getInstance().get(format);
    }

    @Override
    protected SBOLVisitor<RDFHandlerException> createWriter(OutputStream out) {
        return new Writer(factory.getWriter(out));
    }

    /**
     * The actual writer implementation that simply passes the triples to the
     * underlying RDF writer.
     *
     * @author Evren Sirin
     */
    protected static class Writer extends SBOLAbstractWriterVisitor {

        private final RDFWriter out;

        public Writer(RDFWriter out) {
            this.out = out;
        }

        public void visit(SBOLDocument doc) throws RDFHandlerException {

            out.startRDF();
            out.handleNamespace("s", SBOLVocabulary.NAMESPACE);
            out.handleNamespace("rdf", RDF.NAMESPACE);
            out.handleNamespace("xsd", XMLSchema.NAMESPACE);
            out.handleNamespace("so", "http://purl.obolibrary.org/obo/");

            super.visit(doc);

            out.endRDF();
        }

        protected void write(Resource subj, URI pred, Value obj) throws RDFHandlerException {
            out.handleStatement(FACTORY.createStatement(subj, pred, obj));
        }
    }
}
